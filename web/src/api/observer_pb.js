// source: observer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.isitblocked.observer.CreateJobRequest', null, global);
goog.exportSymbol('proto.isitblocked.observer.CreateJobResponse', null, global);
goog.exportSymbol('proto.isitblocked.observer.GetJobRequest', null, global);
goog.exportSymbol('proto.isitblocked.observer.Job', null, global);
goog.exportSymbol('proto.isitblocked.observer.ListJobsRequest', null, global);
goog.exportSymbol('proto.isitblocked.observer.ListJobsResponse', null, global);
goog.exportSymbol('proto.isitblocked.observer.ListProbesRequest', null, global);
goog.exportSymbol('proto.isitblocked.observer.ListProbesResponse', null, global);
goog.exportSymbol('proto.isitblocked.observer.Probe', null, global);
goog.exportSymbol('proto.isitblocked.observer.Result', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.CreateJobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.CreateJobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.CreateJobRequest.displayName = 'proto.isitblocked.observer.CreateJobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.CreateJobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.CreateJobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.CreateJobResponse.displayName = 'proto.isitblocked.observer.CreateJobResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.ListJobsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.ListJobsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.ListJobsRequest.displayName = 'proto.isitblocked.observer.ListJobsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.ListJobsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.ListJobsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.ListJobsResponse.displayName = 'proto.isitblocked.observer.ListJobsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.GetJobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.GetJobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.GetJobRequest.displayName = 'proto.isitblocked.observer.GetJobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.ListProbesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.ListProbesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.ListProbesRequest.displayName = 'proto.isitblocked.observer.ListProbesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.ListProbesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isitblocked.observer.ListProbesResponse.repeatedFields_, null);
};
goog.inherits(proto.isitblocked.observer.ListProbesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.ListProbesResponse.displayName = 'proto.isitblocked.observer.ListProbesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.Job = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isitblocked.observer.Job.repeatedFields_, null);
};
goog.inherits(proto.isitblocked.observer.Job, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.Job.displayName = 'proto.isitblocked.observer.Job';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.Result.displayName = 'proto.isitblocked.observer.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isitblocked.observer.Probe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isitblocked.observer.Probe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isitblocked.observer.Probe.displayName = 'proto.isitblocked.observer.Probe';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.CreateJobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.CreateJobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.CreateJobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.CreateJobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forceCreate: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.CreateJobRequest}
 */
proto.isitblocked.observer.CreateJobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.CreateJobRequest;
  return proto.isitblocked.observer.CreateJobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.CreateJobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.CreateJobRequest}
 */
proto.isitblocked.observer.CreateJobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceCreate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.CreateJobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.CreateJobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.CreateJobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.CreateJobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForceCreate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string input = 1;
 * @return {string}
 */
proto.isitblocked.observer.CreateJobRequest.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.CreateJobRequest} returns this
 */
proto.isitblocked.observer.CreateJobRequest.prototype.setInput = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool force_create = 2;
 * @return {boolean}
 */
proto.isitblocked.observer.CreateJobRequest.prototype.getForceCreate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.isitblocked.observer.CreateJobRequest} returns this
 */
proto.isitblocked.observer.CreateJobRequest.prototype.setForceCreate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.CreateJobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.CreateJobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.CreateJobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.CreateJobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    jobId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.CreateJobResponse}
 */
proto.isitblocked.observer.CreateJobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.CreateJobResponse;
  return proto.isitblocked.observer.CreateJobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.CreateJobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.CreateJobResponse}
 */
proto.isitblocked.observer.CreateJobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreated(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJobId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.CreateJobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.CreateJobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.CreateJobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.CreateJobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getJobId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool created = 1;
 * @return {boolean}
 */
proto.isitblocked.observer.CreateJobResponse.prototype.getCreated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.isitblocked.observer.CreateJobResponse} returns this
 */
proto.isitblocked.observer.CreateJobResponse.prototype.setCreated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 job_id = 2;
 * @return {number}
 */
proto.isitblocked.observer.CreateJobResponse.prototype.getJobId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.CreateJobResponse} returns this
 */
proto.isitblocked.observer.CreateJobResponse.prototype.setJobId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.ListJobsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.ListJobsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.ListJobsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListJobsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.ListJobsRequest}
 */
proto.isitblocked.observer.ListJobsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.ListJobsRequest;
  return proto.isitblocked.observer.ListJobsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.ListJobsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.ListJobsRequest}
 */
proto.isitblocked.observer.ListJobsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.ListJobsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.ListJobsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.ListJobsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListJobsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.ListJobsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.ListJobsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.ListJobsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListJobsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.ListJobsResponse}
 */
proto.isitblocked.observer.ListJobsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.ListJobsResponse;
  return proto.isitblocked.observer.ListJobsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.ListJobsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.ListJobsResponse}
 */
proto.isitblocked.observer.ListJobsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.ListJobsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.ListJobsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.ListJobsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListJobsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.GetJobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.GetJobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.GetJobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.GetJobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.GetJobRequest}
 */
proto.isitblocked.observer.GetJobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.GetJobRequest;
  return proto.isitblocked.observer.GetJobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.GetJobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.GetJobRequest}
 */
proto.isitblocked.observer.GetJobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.GetJobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.GetJobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.GetJobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.GetJobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.isitblocked.observer.GetJobRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.GetJobRequest} returns this
 */
proto.isitblocked.observer.GetJobRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.ListProbesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.ListProbesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.ListProbesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListProbesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.ListProbesRequest}
 */
proto.isitblocked.observer.ListProbesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.ListProbesRequest;
  return proto.isitblocked.observer.ListProbesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.ListProbesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.ListProbesRequest}
 */
proto.isitblocked.observer.ListProbesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.ListProbesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.ListProbesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.ListProbesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListProbesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isitblocked.observer.ListProbesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.ListProbesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.ListProbesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.ListProbesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListProbesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    probesList: jspb.Message.toObjectList(msg.getProbesList(),
    proto.isitblocked.observer.Probe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.ListProbesResponse}
 */
proto.isitblocked.observer.ListProbesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.ListProbesResponse;
  return proto.isitblocked.observer.ListProbesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.ListProbesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.ListProbesResponse}
 */
proto.isitblocked.observer.ListProbesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.isitblocked.observer.Probe;
      reader.readMessage(value,proto.isitblocked.observer.Probe.deserializeBinaryFromReader);
      msg.addProbes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.ListProbesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.ListProbesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.ListProbesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.ListProbesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProbesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.isitblocked.observer.Probe.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Probe probes = 1;
 * @return {!Array<!proto.isitblocked.observer.Probe>}
 */
proto.isitblocked.observer.ListProbesResponse.prototype.getProbesList = function() {
  return /** @type{!Array<!proto.isitblocked.observer.Probe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.isitblocked.observer.Probe, 1));
};


/**
 * @param {!Array<!proto.isitblocked.observer.Probe>} value
 * @return {!proto.isitblocked.observer.ListProbesResponse} returns this
*/
proto.isitblocked.observer.ListProbesResponse.prototype.setProbesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.isitblocked.observer.Probe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.isitblocked.observer.Probe}
 */
proto.isitblocked.observer.ListProbesResponse.prototype.addProbes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.isitblocked.observer.Probe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.isitblocked.observer.ListProbesResponse} returns this
 */
proto.isitblocked.observer.ListProbesResponse.prototype.clearProbesList = function() {
  return this.setProbesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isitblocked.observer.Job.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.Job.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.Job.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.Job} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Job.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    website: jspb.Message.getFieldWithDefault(msg, 2, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hidden: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.isitblocked.observer.Result.toObject, includeInstance),
    createdAt: jspb.Message.getFieldWithDefault(msg, 6, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.Job}
 */
proto.isitblocked.observer.Job.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.Job;
  return proto.isitblocked.observer.Job.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.Job} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.Job}
 */
proto.isitblocked.observer.Job.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsite(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    case 5:
      var value = new proto.isitblocked.observer.Result;
      reader.readMessage(value,proto.isitblocked.observer.Result.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.Job.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.Job.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.Job} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Job.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWebsite();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.isitblocked.observer.Result.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.isitblocked.observer.Job.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string website = 2;
 * @return {string}
 */
proto.isitblocked.observer.Job.prototype.getWebsite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setWebsite = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.isitblocked.observer.Job.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool hidden = 4;
 * @return {boolean}
 */
proto.isitblocked.observer.Job.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated Result results = 5;
 * @return {!Array<!proto.isitblocked.observer.Result>}
 */
proto.isitblocked.observer.Job.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.isitblocked.observer.Result>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.isitblocked.observer.Result, 5));
};


/**
 * @param {!Array<!proto.isitblocked.observer.Result>} value
 * @return {!proto.isitblocked.observer.Job} returns this
*/
proto.isitblocked.observer.Job.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.isitblocked.observer.Result=} opt_value
 * @param {number=} opt_index
 * @return {!proto.isitblocked.observer.Result}
 */
proto.isitblocked.observer.Job.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.isitblocked.observer.Result, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional string created_at = 6;
 * @return {string}
 */
proto.isitblocked.observer.Job.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string updated_at = 7;
 * @return {string}
 */
proto.isitblocked.observer.Job.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Job} returns this
 */
proto.isitblocked.observer.Job.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jobId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    probeId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hidden: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    dnsConsistency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    accessible: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    blocking: jspb.Message.getFieldWithDefault(msg, 7, ""),
    rawData: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.Result}
 */
proto.isitblocked.observer.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.Result;
  return proto.isitblocked.observer.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.Result}
 */
proto.isitblocked.observer.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJobId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProbeId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDnsConsistency(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccessible(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocking(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawData(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getJobId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProbeId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDnsConsistency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAccessible();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBlocking();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRawData();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.isitblocked.observer.Result.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 job_id = 2;
 * @return {number}
 */
proto.isitblocked.observer.Result.prototype.getJobId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setJobId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 probe_id = 3;
 * @return {number}
 */
proto.isitblocked.observer.Result.prototype.getProbeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setProbeId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool hidden = 4;
 * @return {boolean}
 */
proto.isitblocked.observer.Result.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string dns_consistency = 5;
 * @return {string}
 */
proto.isitblocked.observer.Result.prototype.getDnsConsistency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setDnsConsistency = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool accessible = 6;
 * @return {boolean}
 */
proto.isitblocked.observer.Result.prototype.getAccessible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setAccessible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string blocking = 7;
 * @return {string}
 */
proto.isitblocked.observer.Result.prototype.getBlocking = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setBlocking = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string raw_data = 8;
 * @return {string}
 */
proto.isitblocked.observer.Result.prototype.getRawData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setRawData = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string created_at = 9;
 * @return {string}
 */
proto.isitblocked.observer.Result.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string updated_at = 10;
 * @return {string}
 */
proto.isitblocked.observer.Result.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Result} returns this
 */
proto.isitblocked.observer.Result.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isitblocked.observer.Probe.prototype.toObject = function(opt_includeInstance) {
  return proto.isitblocked.observer.Probe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isitblocked.observer.Probe} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Probe.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    asn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    networkName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cc: jspb.Message.getFieldWithDefault(msg, 5, ""),
    resolverIp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    resolverAsn: jspb.Message.getFieldWithDefault(msg, 7, ""),
    resolverNetworkName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    softwareName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    softwareVersion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    lastContact: jspb.Message.getFieldWithDefault(msg, 11, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 12, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isitblocked.observer.Probe}
 */
proto.isitblocked.observer.Probe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isitblocked.observer.Probe;
  return proto.isitblocked.observer.Probe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isitblocked.observer.Probe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isitblocked.observer.Probe}
 */
proto.isitblocked.observer.Probe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCc(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolverIp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolverAsn(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolverNetworkName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareVersion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastContact(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isitblocked.observer.Probe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isitblocked.observer.Probe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isitblocked.observer.Probe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isitblocked.observer.Probe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAsn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResolverIp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getResolverAsn();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getResolverNetworkName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSoftwareName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSoftwareVersion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLastContact();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.isitblocked.observer.Probe.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string asn = 3;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getAsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setAsn = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string network_name = 4;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setNetworkName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string cc = 5;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getCc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setCc = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string resolver_ip = 6;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getResolverIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setResolverIp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string resolver_asn = 7;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getResolverAsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setResolverAsn = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string resolver_network_name = 8;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getResolverNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setResolverNetworkName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string software_name = 9;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getSoftwareName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setSoftwareName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string software_version = 10;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getSoftwareVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setSoftwareVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string last_contact = 11;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getLastContact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setLastContact = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string created_at = 12;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string updated_at = 13;
 * @return {string}
 */
proto.isitblocked.observer.Probe.prototype.getUpdatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.isitblocked.observer.Probe} returns this
 */
proto.isitblocked.observer.Probe.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


goog.object.extend(exports, proto.isitblocked.observer);
